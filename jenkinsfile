pipeline {
    agent any

    tools {
        nodejs "node"
    }

    environment {
        SONAR_HOME = tool 'sonar-scanner'
        AWS_DEFAULT_REGION = 'us-east-1'
        // Use Jenkins credentials ID 
        AWS_ACCESS_KEY_ID = credentials('aws-access-key-id')
        AWS_SECRET_ACCESS_KEY = credentials('aws-secret-access-key')
    }


    stages {
        stage('GIT') {
            steps {
                git branch: 'main', url: 'https://github.com/joyson04/nextjs-animated-slider-main.git'
            }
        }

        stage('Depency Nodejs') {
            steps {
                sh "yarn install"
            }
        }

        stage('Sonarscanner Analayse') {
            steps {
               withSonarQubeEnv('sonar-server') {
                    sh  '''
                            $SONAR_HOME/bin/sonar-scanner -Dsonar.projectName=nextjs-animated-slider \
                            -Dsonar.projectKey=nextjs-animated-slider \
                            -Dsonar.sources=. \
                            -Dsonar.inclusions=**/*.js,**/*.tsx
                        '''
                    sh 'echo $SONAR_HOME'
               }
            }
        }

       
        stage('Quality Gate check') {
            steps {
               timeout(time: 1, unit: 'HOURS') {
                    waitForQualityGate abortPipeline: true //pipeline cloudn't break
                }
            }
        }

        
        stage('OWASP Dependency Track') {
            steps {
                dependencyCheck additionalArguments: '--scan . ', odcInstallation: 'owasp'
                    dependencyCheckPublisher pattern: '**/dependency-check-report.xml'
            }
        }

        
        stage('SNYK Latest Download') {
            steps {
                script {
                    sh "curl -Lo snyk https://github.com/snyk/snyk/releases/latest/download/snyk-linux"
                    sh "curl -O -s -L https://github.com/snyk/cli/releases/download/v1.1296.2/snyk-linux.sha256"
                    sh "shasum snyk-linux.sha256"
                    sh "chmod +x snyk"
                    sh "./snyk --version"
                }
            }
        }


        stage('hadolint Latest Download') {
            steps {
                script {
                    sh "curl -Lo hadolint https://github.com/hadolint/hadolint/releases/download/v2.12.0/hadolint-Linux-x86_64"
                    sh "curl -O -s -L https://github.com/hadolint/hadolint/releases/download/v2.12.0/hadolint-Linux-x86_64.sha256"
                    sh "shasum hadolint-Linux-x86_64.sha256"
                    sh "chmod +x hadolint"
                    sh "./hadolint --version"
                }
            }
        }

        stage('SNYK AUTH') {
            steps {
                withCredentials([string(credentialsId: 'orgination-Snyk-API-Token', variable: 'SNYK_TOKEN')]) {
                    sh "./snyk auth ${SNYK_TOKEN}"
                }
            }
        }


        stage('Snyk Code') {
            steps {
                catchError(buildResult: 'SUCCESS', stageResult: 'FAILURE') {
                    sh './snyk code test --sarif-file-output=results-code.sarif'
                }
                recordIssues sourceCodeRetention: 'LAST_BUILD', tools: [sarif(id: 'snyk-container', name: 'Snyk Container', pattern: 'results-container.sarif')]
            }
        }


        stage('SNYK Test') {
            steps {
                withCredentials([string(credentialsId: 'orgination-Snyk-API-Token', variable: 'SNYK_TOKEN')]) {
                    script {
                        def snykStatus = sh(script: "./snyk test ", returnStatus: true)
                        if (snykStatus != 0) {
                            echo "./Snyk test reported issues (exit code ${snykStatus})"
                            // Optionally set build as unstable or failed
                            currentBuild.result = 'UNSTABLE'
                        } else {
                            echo "Snyk test passed cleanly"
                        }
                    }
                }
            }
        }
  
        stage('SNYK Monitoring') {
            steps {
                withCredentials([string(credentialsId: 'orgination-Snyk-API-Token', variable: 'SNYK_TOKEN')]) {
                    script {
                        def snykStatusm = sh(script: "./snyk monitor", returnStatus: true)
                        if (snykStatusm != 0) {
                            error("Snyk monitor failed (exit code ${snykStatusm})")
                        } else {
                            echo "Snyk monitoring successful"
                        }
                    }
                }
            }
        }

        stage('hadolint (report only)') {
            steps {
                script {
                     // Fail only on error level issues or higher, ignoring warnings
                    def result = sh(script: './hadolint --failure-threshold error Dockerfile', returnStatus: true)
                    if (result != 0) {
                        echo 'Hadolint found issues, but proceeding...'
                    } 
                }
            }
        }

        stage('hadolint custom severity levels') {
            steps {
               sh " ./hadolint  --error DL3018 --warning DL3013 --info DL3025 Dockerfile "
            }
        }


        stage('Trivy Image Scan') {
            steps {
               sh " trivy image --scanners vuln --format table -o image.html aravindh05/devscops_testing_frontend "
            }
        }

        stage('Docker-Scout Latest Download') {
            steps {
                script {
                    sh "wget https://github.com/docker/scout-cli/releases/download/v1.17.1/docker-scout_1.17.1_linux_amd64.tar.gz"
                    sh "tar -xvf  docker-scout_1.17.1_linux_amd64.tar.gz.1"
                    sh "chmod +x docker-scout"
                    sh "./docker-scout version"
                }
            }
        }

        stage('Docker-Scout CVES Scan') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'hub-docker', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                    sh 'echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin'
                }

               sh " ./docker-scout cves aravindh05/devscops_testing_frontend "
            }
        }

        stage('Vulnerability Scan - Docker') {
            steps {
                parallel(
                    "Trivy OS Patch":{
                        sh " trivy image --vuln-type os --ignore-unfixed -f json --output patch.json  aravindh05/devscops_testing_frontend "
                    },
                    "OPA Conftest": {
                        sh 'docker run --rm -v $(pwd):/project openpolicyagent/conftest test --policy opa-docker-security.rego Dockerfile'
                    }
                )
             
            }
        }
        

        stage('copa Install') {
            steps {
                
                // Remove existing container if it exists
                sh 'docker rm -f buildkitd || true'
                sh "docker run -d --name buildkitd --privileged moby/buildkit:latest"
                sh "wget https://github.com/project-copacetic/copacetic/releases/download/v0.10.0/copa_0.10.0_linux_amd64.tar.gz"
                sh "tar -xvf copa_0.10.0_linux_amd64.tar.gz"
                sh "chmod +x copa"
                sh "./copa --version"
            }
        }
        
        
        stage('Trivy Scan OS') {
            steps {
                script {
                    def imageName = "aravindh05/devscops_testing_frontend"
                    echo "Scanning Docker image: ${imageName}"

                    // Run Trivy and capture the output
                    def scanOutput = sh(script: "trivy image --quiet --vuln-type os --ignore-unfixed ${imageName}", returnStdout: true)

                    // Extract line with 'Total'
                    def totalLine = scanOutput.readLines().find { it.contains('Total') }

                    // Parse the total number of vulnerabilities
                    if (totalLine) {
                        def vulnCount = totalLine.replaceAll(/[^0-9]/, "").toInteger()
                        echo "Total vulnerabilities found: ${vulnCount}"
                        if (vulnCount >= 1) {
                            error("Build failed: Found ${vulnCount} OS-level vulnerabilities.")
                        } else {
                            echo "No OS vulnerabilities found. Proceeding..."
                        }
                    } else {
                            echo "No vulnerability summary line found. Assuming 0."
                    }
                }
            }
        }
        


        stage('DOCKER RUNNING') {
            steps {
                script {
                    // Remove existing container if it exists
                    sh 'docker rm -f react-app || true'

                    // Pull and run the Docker image
                    withDockerRegistry(credentialsId: 'hub-docker') {
                        sh "docker run -d --name react-app -p 3000:3000 aravindh05/devscops_testing_frontend"
                    }

                    // Optional: Verify the container is running
                    def dockerStatus = sh(script: 'docker ps -f name=react-app --format "{{.Names}}"', returnStdout: true).trim()
                    if (dockerStatus != 'react-app') {
                        error("Docker container did not start properly.")
                    }
                }
            }
        }   

        stage('Run ZAP API Scan') {
            steps {
                script {
                    def targetUrl = "http://localhost:3000"
                    def currentDir = sh(script: 'pwd', returnStdout: true).trim()

                    def zapExitCode = sh(
                    script: """
                        echo "Running ZAP scan against: ${targetUrl}"
                        docker run -v ${currentDir}:/zap/wrk/:rw --network="host" -t zaproxy/zap-weekly zap-api-scan.py -t ${targetUrl}/api-docs -f openapi -r /tmp/scan_zap_report.html 
                    """,
                    returnStatus: true
                    )

                    echo "ZAP scan finished with exit code: ${zapExitCode}"
                    if (zapExitCode > 0) {
                        echo "ZAP reported alerts. Continuing pipeline but marking as UNSTABLE."
                        currentBuild.result = 'UNSTABLE'
                    }
                }
            }
        }

         stage('Install System Dependencies') {
            steps {
                sh '''
                    sudo apt-get update
                    sudo apt-get install -y python3-poetry python3-pip unzip jq 
                '''
            }
        }


        stage('Install Poetry with pip') {
            steps {
                dir('prowler') {
                    sh '''
                        curl -sSL https://install.python-poetry.org | python3 -
                        export PATH="$HOME/.local/bin:$PATH"
                        source ~/.bashrc  # or ~/.zshrc
                        echo "Poetry installed at: $(which poetry)"
                        poetry --version
                        poetry config virtualenvs.create false  # Use the global Python environment
                    '''
                }
            }
        }


        stage('Clone Prowler') {
            steps {
                git branch: 'main', url: 'https://github.com/prowler-cloud/prowler.git'
            }
        }


        stage('Install Python Dependencies with Poetry') {
            steps {
                dir('prowler') {
                    sh '''
                        poetry install
                    '''
                }
            }
        }


        stage('Run Prowler with Poetry') {
            steps {
                dir('prowler') {
                    sh '''
                        poetry run python3 prowler-cli.py aws --services ec2
                    '''
                }
            }
        }
        
        stage('Run Prowler with Poetry') {
            steps {
                dir('prowler') {
                    sh '''
                        poetry run python3 prowler-cli.py aws --services s3
                    '''
                }
            }
        }
        
        stages {
            stage('Install kube-bench') {
                steps {
                    sh '''
                        curl -L https://github.com/aquasecurity/kube-bench/releases/download/v0.6.2/kube-bench_0.6.2_linux_amd64.deb -o kube-bench_0.6.2_linux_amd64.deb
                        sudo apt-get update
                        sudo apt-get install -y ./kube-bench_0.6.2_linux_amd64.deb -f
                    '''
                }
            }
        }

        stages {
            stage('Run kube-bench for ETCD') {
                steps {
                    script {
                        def output = sh(script: "kube-bench run --targets etcd --version 1.15 --check 2.2 --json", returnStdout: true).trim()
                        def totalFail = sh(script: "echo '${output}' | jq '.[] | .total_fail'", returnStdout: true).trim()
                        if (totalFail != "0") {
                            echo "CIS Benchmark Failed for ETCD check 2.2 (Failures: ${totalFail})"
                            error("CIS Benchmark failed")
                        } else {
                            echo "CIS Benchmark Passed for ETCD check 2.2"
                        }
                    }
                }  
            }
        }

        stages {
            stage('Run kube-bench for Node checks 4.2.1 and 4.2.2') {
                steps {
                    script {
                        // Run kube-bench and capture the JSON output
                        def output = sh(script: "kube-bench run --targets node --version 1.15 --check 4.2.1,4.2.2 --json", returnStdout: true).trim()

                        // Extract total_fail values and sum them (handles multiple JSON array items)
                        def totalFail = sh(script: "echo '${output}' | jq '[.[].total_fail] | add'", returnStdout: true).trim()

                        if (totalFail != "0") {
                            echo "CIS Benchmark Failed for Node checks 4.2.1 and 4.2.2 (Failures: ${totalFail})"
                            error("CIS Benchmark failed")
                        } else {
                            echo "CIS Benchmark Passed for Node checks 4.2.1 and 4.2.2"
                        }
                    }
                }
            }
        }

        stage('Publish to Nexus NPM Repo') {
            steps {
                configFileProvider([configFile(fileId: 'npmrc', targetLocation: '.')]) {
                    sh "npm publish"
                }
            }
        }

    }
}
