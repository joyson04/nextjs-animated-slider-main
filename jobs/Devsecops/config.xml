<?xml version='1.1' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@1520.v56d65e3b_4566">
  <actions>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@2.2255.v56a_15e805f12"/>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@2.2255.v56a_15e805f12">
      <jobProperties/>
      <triggers/>
      <parameters/>
      <options/>
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
  </actions>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <jenkins.model.BuildDiscarderProperty>
      <strategy class="hudson.tasks.LogRotator">
        <daysToKeep>-1</daysToKeep>
        <numToKeep>2</numToKeep>
        <artifactDaysToKeep>-1</artifactDaysToKeep>
        <artifactNumToKeep>-1</artifactNumToKeep>
        <removeLastBuild>false</removeLastBuild>
      </strategy>
    </jenkins.model.BuildDiscarderProperty>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@4106.v7a_8a_8176d450">
    <script>pipeline {
    agent any

    tools {
        nodejs &quot;node&quot;
    }

    environment {
        SONAR_HOME = tool &apos;sonar-scanner&apos;
    }


    stages {
        stage(&apos;GIT&apos;) {
            steps {
                git branch: &apos;main&apos;, url: &apos;https://github.com/joyson04/nextjs-animated-slider-main.git&apos;
            }
        }

        stage(&apos;Depency Nodejs&apos;) {
            steps {
                sh &quot;yarn install&quot;
            }
        }

        stage(&apos;Sonarscanner Analayse&apos;) {
            steps {
               withSonarQubeEnv(&apos;sonar-server&apos;) {
                    sh  &apos;&apos;&apos;
                            $SONAR_HOME/bin/sonar-scanner -Dsonar.projectName=nextjs-animated-slider \
                            -Dsonar.projectKey=nextjs-animated-slider \
                            -Dsonar.sources=. \
                            -Dsonar.inclusions=**/*.js,**/*.tsx
                        &apos;&apos;&apos;
                    sh &apos;echo $SONAR_HOME&apos;
               }
            }
        }

       
        stage(&apos;Quality Gate check&apos;) {
            steps {
               timeout(time: 1, unit: &apos;HOURS&apos;) {
                    waitForQualityGate abortPipeline: true //pipeline cloudn&apos;t break
                }
            }
        }

        
        stage(&apos;OWASP Dependency Track&apos;) {
            steps {
                dependencyCheck additionalArguments: &apos;--scan . &apos;, odcInstallation: &apos;owasp&apos;
                    dependencyCheckPublisher pattern: &apos;**/dependency-check-report.xml&apos;
            }
        }

        stage(&apos;SNYK Latest Download&apos;) {
            steps {
                script {
                    sh &quot;curl -Lo snyk https://github.com/snyk/snyk/releases/latest/download/snyk-linux&quot;
                    sh &quot;curl -O -s -L https://github.com/snyk/cli/releases/download/v1.1296.2/snyk-linux.sha256&quot;
                    sh &quot;shasum snyk-linux.sha256&quot;
                    sh &quot;chmod +x snyk&quot;
                    sh &quot;./snyk --version&quot;
                }
            }
        }


        stage(&apos;hadolint Latest Download&apos;) {
            steps {
                script {
                    sh &quot;curl -Lo hadolint https://github.com/hadolint/hadolint/releases/download/v2.12.0/hadolint-Linux-x86_64&quot;
                    sh &quot;curl -O -s -L https://github.com/hadolint/hadolint/releases/download/v2.12.0/hadolint-Linux-x86_64.sha256&quot;
                    sh &quot;shasum hadolint-Linux-x86_64.sha256&quot;
                    sh &quot;chmod +x hadolint&quot;
                    sh &quot;./hadolint --version&quot;
                }
            }
        }

        stage(&apos;SNYK AUTH&apos;) {
            steps {
                withCredentials([string(credentialsId: &apos;orgination-Snyk-API-Token&apos;, variable: &apos;SNYK_TOKEN&apos;)]) {
                    sh &quot;./snyk auth ${SNYK_TOKEN}&quot;
                }
            }
        }


        stage(&apos;Snyk Code&apos;) {
            steps {
                catchError(buildResult: &apos;SUCCESS&apos;, stageResult: &apos;FAILURE&apos;) {
                    sh &apos;./snyk code test --sarif-file-output=results-code.sarif&apos;
                }
                recordIssues sourceCodeRetention: &apos;LAST_BUILD&apos;, tools: [sarif(id: &apos;snyk-container&apos;, name: &apos;Snyk Container&apos;, pattern: &apos;results-container.sarif&apos;)]
            }
        }


        stage(&apos;SNYK Test&apos;) {
            steps {
                withCredentials([string(credentialsId: &apos;orgination-Snyk-API-Token&apos;, variable: &apos;SNYK_TOKEN&apos;)]) {
                    script {
                        def snykStatus = sh(script: &quot;./snyk test &quot;, returnStatus: true)
                        if (snykStatus != 0) {
                            echo &quot;./Snyk test reported issues (exit code ${snykStatus})&quot;
                            // Optionally set build as unstable or failed
                            currentBuild.result = &apos;UNSTABLE&apos;
                        } else {
                            echo &quot;Snyk test passed cleanly&quot;
                        }
                    }
                }
            }
        }
  
        stage(&apos;SNYK Monitoring&apos;) {
            steps {
                withCredentials([string(credentialsId: &apos;orgination-Snyk-API-Token&apos;, variable: &apos;SNYK_TOKEN&apos;)]) {
                    script {
                        def snykStatusm = sh(script: &quot;./snyk monitor&quot;, returnStatus: true)
                        if (snykStatusm != 0) {
                            error(&quot;Snyk monitor failed (exit code ${snykStatusm})&quot;)
                        } else {
                            echo &quot;Snyk monitoring successful&quot;
                        }
                    }
                }
            }
        }

        stage(&apos;hadolint (report only)&apos;) {
            steps {
                script {
                     // Fail only on error level issues or higher, ignoring warnings
                    def result = sh(script: &apos;./hadolint --failure-threshold error Dockerfile&apos;, returnStatus: true)
                    if (result != 0) {
                        echo &apos;Hadolint found issues, but proceeding...&apos;
                    } 
                }
            }
        }

        stage(&apos;hadolint custom severity levels&apos;) {
            steps {
               sh &quot; ./hadolint  --error DL3018 --warning DL3013 --info DL3025 Dockerfile &quot;
            }
        }


        stage(&apos;Trivy Image Scan&apos;) {
            steps {
               sh &quot; trivy image --scanners vuln --format table -o image.html aravindh05/devscops_testing_frontend &quot;
            }
        }

        stage(&apos;Docker-Scout Latest Download&apos;) {
            steps {
                script {
                    sh &quot;wget https://github.com/docker/scout-cli/releases/download/v1.17.1/docker-scout_1.17.1_linux_amd64.tar.gz&quot;
                    sh &quot;tar -xvf  docker-scout_1.17.1_linux_amd64.tar.gz.1&quot;
                    sh &quot;chmod +x docker-scout&quot;
                    sh &quot;./docker-scout version&quot;
                }
            }
        }

        stage(&apos;Docker-Scout CVES Scan&apos;) {
            steps {
                withCredentials([usernamePassword(credentialsId: &apos;hub-docker&apos;, usernameVariable: &apos;DOCKER_USER&apos;, passwordVariable: &apos;DOCKER_PASS&apos;)]) {
                    sh &apos;echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin&apos;
                }

               sh &quot; ./docker-scout cves aravindh05/devscops_testing_frontend &quot;
            }
        }

        stage(&apos;Trivy OS Patch&apos;) {
            steps {
               sh &quot; trivy image --vuln-type os --ignore-unfixed -f json --output patch.json  aravindh05/devscops_testing_frontend &quot;
            }
        }

        stage(&apos;copa Install&apos;) {
            steps {
                
                // Remove existing container if it exists
                sh &apos;docker rm -f buildkitd || true&apos;
                sh &quot;docker run -d --name buildkitd --privileged moby/buildkit:latest&quot;
                sh &quot;wget https://github.com/project-copacetic/copacetic/releases/download/v0.10.0/copa_0.10.0_linux_amd64.tar.gz&quot;
                sh &quot;tar -xvf copa_0.10.0_linux_amd64.tar.gz&quot;
                sh &quot;chmod +x copa&quot;
                sh &quot;./copa --version&quot;
            }
        }
        
        
        stage(&apos;Trivy Scan OS&apos;) {
            steps {
                script {
                    def imageName = &quot;aravindh05/devscops_testing_frontend&quot;
                    echo &quot;Scanning Docker image: ${imageName}&quot;

                    // Run Trivy and capture the output
                    def scanOutput = sh(script: &quot;trivy image --quiet --vuln-type os --ignore-unfixed ${imageName}&quot;, returnStdout: true)

                    // Extract line with &apos;Total&apos;
                    def totalLine = scanOutput.readLines().find { it.contains(&apos;Total&apos;) }

                    // Parse the total number of vulnerabilities
                    if (totalLine) {
                        def vulnCount = totalLine.replaceAll(/[^0-9]/, &quot;&quot;).toInteger()
                        echo &quot;Total vulnerabilities found: ${vulnCount}&quot;
                        if (vulnCount &gt;= 1) {
                            error(&quot;Build failed: Found ${vulnCount} OS-level vulnerabilities.&quot;)
                        } else {
                            echo &quot;No OS vulnerabilities found. Proceeding...&quot;
                        }
                    } else {
                            echo &quot;No vulnerability summary line found. Assuming 0.&quot;
                    }
                }
            }
        }
        


        stage(&apos;DOCKER RUNNING&apos;) {
            steps {
                script {
                    // Remove existing container if it exists
                    sh &apos;docker rm -f react-app || true&apos;

                    // Pull and run the Docker image
                    withDockerRegistry(credentialsId: &apos;hub-docker&apos;) {
                        sh &quot;docker run -d --name react-app -p 3000:3000 aravindh05/devscops_testing_frontend&quot;
                    }

                    // Optional: Verify the container is running
                    def dockerStatus = sh(script: &apos;docker ps -f name=react-app --format &quot;{{.Names}}&quot;&apos;, returnStdout: true).trim()
                    if (dockerStatus != &apos;react-app&apos;) {
                        error(&quot;Docker container did not start properly.&quot;)
                    }
                }
            }
        }   

        stage(&apos;Run ZAP API Scan&apos;) {
            steps {
                script {
                    def targetUrl = &quot;http://localhost:3000&quot;
                    def currentDir = sh(script: &apos;pwd&apos;, returnStdout: true).trim()

                    def zapExitCode = sh(
                    script: &quot;&quot;&quot;
                        echo &quot;Running ZAP scan against: ${targetUrl}&quot;
                        docker run -v ${currentDir}:/zap/wrk/:rw --network=&quot;host&quot; -t zaproxy/zap-weekly zap-api-scan.py -t ${targetUrl}/api-docs -f openapi -r /tmp/scan_zap_report.html 
                    &quot;&quot;&quot;,
                    returnStatus: true
                    )

                    echo &quot;ZAP scan finished with exit code: ${zapExitCode}&quot;
                    if (zapExitCode &gt; 0) {
                        echo &quot;ZAP reported alerts. Continuing pipeline but marking as UNSTABLE.&quot;
                        currentBuild.result = &apos;UNSTABLE&apos;
                    }
                }
            }
        }
    }
}
</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>